<?php

/**
 * @file
 * Theme preprocessors.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\gho_fields\Plugin\Field\FieldFormatter\GhoRelatedArticlesFormatter;

/**
 * Implements hook_menu().
 */
function common_design_subtheme_theme() {
  return [
    'menu__page_not_found' => [
      'base hook' => 'menu',
    ],
  ];
}

/**
 * Get the list of components to attach to formatted text fields.
 *
 * @return array
 *   Array with component libraries as keys and list of tags and classes to
 *   add as values.
 */
function common_design_subtheme_get_components() {
  static $components = [
    'common_design/cd-table' => [
      'table' => ['cd-table', 'cd-table--striped', 'cd-table--responsive'],
    ],
  ];
  return $components;
}

/**
 * Implements hook_preprocess().
 */
function common_design_subtheme_preprocess(&$variables) {
  $variables['base_path'] = base_path();
}

/**
 * Implements hook_preprocess_field().
 *
 * This adds attach component libraries and add necessary classes to filtered
 * text field.
 *
 * Note: other possibilities:
 * - Target specific fields: `$variables['element']['#field_name']`.
 * - Target view mode: `$variables['element']['#view_mode']`.
 *
 * Note: we could also add the #post_render and libraries to all the
 * "processed_text" elements via a hook_element_info_alter().
 *
 * @todo Do we need to alter the cache somehow?
 *
 * @see template_preprocess_field()
 */
function common_design_subtheme_preprocess_field(&$variables) {
  switch ($variables['element']['#formatter']) {
    case 'text_summary_or_trimmed':
    case 'text_trimmed':
    case 'text_default':
      foreach ($variables['items'] as $key => $item) {
        $variables['items'][$key]['content']['#post_render'][] = 'common_design_subtheme_add_component_classes';
      }
      foreach (common_design_subtheme_get_components() as $component => $dummy) {
        $variables['#attached']['library'][] = $component;
      }
      break;
  }
}

/**
 * Add component classes to HTML tags.
 *
 * @param string $html
 *   Html output.
 * @param array $element
 *   Render array.
 *
 * @return string
 *   Modified HTML.
 */
function common_design_subtheme_add_component_classes($html, array $element) {
  $components = common_design_subtheme_get_components();
  if (empty($components)) {
    return $html;
  }

  $dom = Html::load($html);

  // Add the classes to the HTML tags for each component.
  foreach ($components as $tags) {
    foreach ($tags as $tag => $classes) {
      $nodes = $dom->getElementsByTagName($tag);
      foreach ($nodes as $node) {
        $existing = $node->getAttribute('class') ?? '';
        $classes = array_merge(preg_split("/\s+/", $existing), $classes);
        $node->setAttribute('class', trim(implode(' ', array_unique($classes))));
      }
    }
  }

  $html = Html::serialize($dom);
  return trim($html);
}

/**
 * Implements hook_preprocess_paragraph__page_title().
 *
 * Use the page title block for the title and display the local tasks below it.
 * We use common_design_subtheme_get_block_render_array() that will cache the
 * render array of the blocks so that they are not re-rendered and displayed
 * if done by the paragraph title.
 */
function common_design_subtheme_preprocess_paragraph__page_title(&$variables) {
  // If we are in a form, then the '#id' will be set. In that case, we don't
  // want to show the page title as it would not be updated when chaging the
  // title field. We will display a placeholder instead, which is handled by
  // paragraphs_page_title_preprocess_paragraph__page_title().
  if (!isset($variables['elements']['#id'])) {
    $variables['content']['title'] = common_design_subtheme_get_block_render_array('page_title_block');
    $variables['content']['local_tasks'] = common_design_subtheme_get_block_render_array('local_tasks_block', FALSE);
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Use the page title block for the title and display the local tasks below it.
 * We use common_design_subtheme_get_block_render_array() that will cache the
 * render array of the blocks so that they are not re-rendered and displayed
 * again.
 *
 * @see common_design_subtheme_preprocess_page()
 * @see common_design_subtheme_get_block_render_array()
 */
function common_design_subtheme_preprocess_node(&$variables) {
  $node = $variables['node'];
  $language = $node->language();
  $variables['attributes']['lang'] = $language->getId();
  $variables['attributes']['dir'] = $language->getDirection();

  // Editorial status for the node to help distinguished if a node is published
  // and what is the current language.
  $user = \Drupal::currentUser();
  if ($user->hasPermission('edit any ' . $node->bundle() . ' content')) {
    // We don't want to show the translated language name for that so we need
    // that map because ::getName() returns the translated name.
    $languages = [
      'ar' => 'Arabic',
      'en' => 'English',
      'es' => 'Spanish',
      'fr' => 'French',
    ];
    $variables['attributes']['data-status'] = implode(' - ', [
      $languages[$language->getId()] ?? $language->getName(),
      $node->isPublished() ? 'published' : 'not published',
    ]);
  }

  // Prepare the title and local tasks so we have better control over where
  // to display them for content in full mode or for the home page.
  $view_mode = $variables['view_mode'] ?? '';
  if ($view_mode === 'full' || $view_mode === 'home_page') {
    $variables['title'] = common_design_subtheme_get_block_render_array('page_title_block');
    $variables['local_tasks'] = common_design_subtheme_get_block_render_array('local_tasks_block', FALSE);
  }
}

/**
 * Implements hook_preprocess_node__article().
 *
 * Extract the media credits to display them after the text.
 */
function common_design_subtheme_preprocess_node__story(&$variables) {
  if (isset($variables['content']['field_media'][0]['#media'])) {
    $credits = $variables['content']['field_media'][0]['#media']->field_credits->value;
    $variables['content']['credits'] = ['#markup' => $credits];
  }

  // Show the references at the bottom of the story page.
  if (isset($variables['view_mode']) && $variables['view_mode'] === 'full') {
    $variables['content']['footnotes'] = gho_footnotes_build_footnotes();
    $variables['content']['footnotes']['#weight'] = 998;
  }
}

/**
 * Implements hook_preprocess_node__article().
 *
 * Show the references at the bottom of the achievement page.
 */
function common_design_subtheme_preprocess_node__achievement(&$variables) {
  // Show the references at the bottom of the story page.
  if (isset($variables['view_mode']) && $variables['view_mode'] === 'full') {
    $variables['content']['footnotes'] = gho_footnotes_build_footnotes();
    $variables['content']['footnotes']['#weight'] = 998;
  }
}

/**
 * Implements hook_preprocess_node__article().
 *
 * Show the related articles at the end of the main articles.
 */
function common_design_subtheme_preprocess_node__article(&$variables) {
  $view_mode = $variables['view_mode'] ?? '';

  // Copy the hero image credits to the end of the caption field.
  if ($view_mode === 'full' || $view_mode === 'home_page') {
    if (isset($variables['content']['field_hero_image'][0]['#media'])) {
      $credits = $variables['content']['field_hero_image'][0]['#media']->field_credits->value;
      $variables['content']['field_caption'][0]['#credits'] = ['#markup' => $credits];
    }
  }

  // Main articles.
  if ($view_mode === 'full') {
    $node_id = $variables['node']->id();
    $node_uri = 'entity:node/' . $node_id;

    // Show the footnotes at the bottom of the article page, before the
    // related articles.
    $variables['content']['footnotes'] = gho_footnotes_build_footnotes();
    $variables['content']['footnotes']['#weight'] = 998;

    // Load the menu link associated with the node.
    $storage = \Drupal::service('entity_type.manager')->getStorage('menu_link_content');
    $links = $storage->loadByProperties(['link__uri' => $node_uri]);

    if (!empty($links)) {
      // Get the list of node render arrays for the children of the parent of
      // the menu link, excluding this node. This will return the related
      // articles.
      $menu_id = reset($links)->getParentId();
      $list = GhoRelatedArticlesFormatter::getNodeListFromMenu($menu_id, [$node_id]);

      if (!empty($list)) {
        $variables['content']['related_articles'] = [
          '#theme' => 'gho_related_articles_formatter',
          '#title' => t('More from this section'),
          '#list' => $list,
          // Ensure it's displayed at the end.
          '#weight' => 999,
        ];
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph__sub_article().
 *
 * Add a class to the sub-article paragraph indicating whether the article has
 * a hero or not as it's difficult to access from within the twig templates.
 */
function common_design_subtheme_preprocess_paragraph__sub_article(&$variables) {
  if (isset($variables['content']['field_article'][0]['#node'])) {
    $hero = $variables['content']['field_article'][0]['#node']->field_hero_image->target_id;
    $variables['hero'] = !empty($hero);
  }
}

/**
 * Implements hook_preprocess_paragraph__photo_gallery().
 *
 * Extract the media credits to display them after the text.
 */
function common_design_subtheme_preprocess_paragraph__photo_gallery(&$variables) {
  if (isset($variables['content']['field_photos'][0]['#media'])) {
    $credits = $variables['content']['field_photos'][0]['#media']->field_credits->value;
    $variables['content']['credits'] = ['#markup' => $credits];
  }
}

/**
 * Implements hook_preprocess_paragraph__image_with_text().
 *
 * Extract the media credits to display them after the text.
 */
function common_design_subtheme_preprocess_paragraph__image_with_text(&$variables) {
  if (isset($variables['content']['field_image'][0]['#media'])) {
    $credits = $variables['content']['field_image'][0]['#media']->field_credits->value;
    $variables['content']['credits'] = ['#markup' => $credits];
  }
}

/**
 * Implements hook_preprocess_field__node__field_caption__article().
 *
 * Add a class to identify the article caption.
 */
function common_design_subtheme_preprocess_field__node__field_caption__article(&$variables) {
  if (!isset($variables['items'][0]['content']['#attributes'])) {
    $variables['items'][0]['content']['#attributes'] = new Attribute();
  }
  $variables['items'][0]['content']['#attributes']->addClass('gho-caption--article');
}

/**
 * Implements hook_preprocess_page().
 *
 * Remove the default page title and local tasks blocks if they were already
 * rendered by a page title paragraph or when viewing full article nodes.
 *
 * @see common_design_subtheme_preprocess_paragraph__page_title()
 * @see common_design_subtheme_preprocess_node__article()
 */
function common_design_subtheme_preprocess_page(&$variables) {
  if (isset($variables['node'])) {
    $rendered = &drupal_static('common_design_subtheme_rendered_blocks');

    // If the block has already been rendered (from the page title block) then
    // we remove the default page title block.
    if (isset($rendered['page_title_block'])) {
      unset($variables['page']['content']['common_design_subtheme_page_title']);
    }

    // Same for the local tasks block.
    if (isset($rendered['local_tasks_block'])) {
      unset($variables['page']['content']['common_design_subtheme_local_tasks']);
    }
  }
}

/**
 * Implements hook_preprocess_page__404().
 */
function common_design_subtheme_preprocess_page__404(&$variables) {
  // Generate the message to display before the menu.
  $notfound = t('The page @path was not found.', [
    '@path' => \Drupal::request()->getPathInfo() ?? '/',
  ]);
  $message = [
    '<strong>' . $notfound . '</strong>',
    t('Sorry for any inconvenience.'),
    t('Here are some useful pages to help you get back on track:'),
  ];

  // Set the page content.
  $variables['page']['content']['system_main'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['gho-page-404'],
    ],
    '#attached' => [
      'library' => ['common_design_subtheme/gho-page-404'],
    ],
    'message' => ['#markup' => '<p>' . implode('</p><p>', $message) . '</p>'],
    'navigation' => common_design_subtheme_get_navigation_tree(),
  ];
}

/**
 * Get the navigation tree for the 404 page.
 *
 * @return array
 *   Render array with either the main navigation tree or with a link to the
 *   homepage in English if there is none in the current language.
 */
function common_design_subtheme_get_navigation_tree() {
  $language_manager = \Drupal::service('language_manager');
  $langcode = $language_manager->getCurrentLanguage()->getId();

  // Check if the homepage in the given language exists.
  $storage = \Drupal::service('entity_type.manager')->getStorage('node');
  $ids = $storage->getQuery()
    ->condition('nid', 1)
    ->condition('langcode', $langcode)
    ->condition('status', NodeInterface::PUBLISHED)
    ->execute();

  // Show a link to the homepage in English if there is no homepage in the
  // current language.
  if (empty($ids)) {
    $default_language = $language_manager->getDefaultLanguage();
    return [
      '#theme' => 'menu__page_not_found',
      '#items' => [
        'home page' => [
          'title' => t('Home page in @language', [
            '@language' => $default_language->getName(),
          ]),
          'url' => new Url('<front>', [], [
            'language' => $default_language,
          ]),
        ],
      ],
    ];
  }

  $menu_tree = \Drupal::service('menu.link_tree');

  // Parameter to load the menu children of the given menu.
  $parameters = new MenuTreeParameters();
  $parameters->setMaxdepth(2);
  $parameters->excludeRoot();

  // Load tree.
  $tree = $menu_tree->load('main', $parameters);

  // Check the access to the nodes in the menu and ensure they are sorted.
  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkNodeAccess'],
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];

  // Tree is an associated array with a key for the parent menu entry
  // and a \Drupal\Core\Menu\MenuLinkTreeElement[] as value.
  $tree = $menu_tree->transform($tree, $manipulators);

  // Get the render for the tree and use the theme for the page not found.
  $build = $menu_tree->build($tree);
  $build['#theme'] = 'menu__page_not_found';

  // Remove the menu items without children.
  $items = array_filter($build['#items'], function ($item) {
    return !empty($item['below']);
  });

  // Add the homepage as first link.
  $build['#items'] = [
    'home page' => [
      'title' => t('Home page'),
      'url' => new Url('<front>'),
    ],
  ] + $items;

  return $build;
}

/**
 * Render a block.
 *
 * We cache a flag indicating the block has already been redendered and return
 * an empty array in that case to ensure that the block is displayed only one
 * on the page.
 *
 * @param string $id
 *   Block ID.
 * @param bool $translate
 *   Translate the block or not. This allows to keep some elements of the page
 *   in the site's default language for example like the local tasks (view, edit
 *   etc.).
 *
 * @return array
 *   Renderable array of the block. Empty array if this was already called
 *   before to avoid displaying the block several times.
 *
 * @see https://drupal.stackexchange.com/a/171733
 */
function common_design_subtheme_get_block_render_array($id, $translate = TRUE) {
  $rendered = &drupal_static('common_design_subtheme_rendered_blocks');

  if (!isset($rendered[$id])) {
    // Prevent rendering the block several times.
    $rendered[$id] = TRUE;

    // Generate an instance of the plugin block.
    $block_manager = \Drupal::service('plugin.manager.block');
    $plugin_block = $block_manager->createInstance($id, []);

    // Skip if there is no block matching the id.
    if (empty($plugin_block)) {
      return [];
    }

    // Check if the block is accessible to the current user.
    $access = $plugin_block->access(\Drupal::currentUser());
    // This can be a boolean or an object implementing AccessResultInterface.
    if ($access === TRUE || ($access instanceof AccessResultInterface && $access->isAllowed())) {
      if ($translate === FALSE) {
        $current_langcode = gho_access_switch_to_language();
        $build = $plugin_block->build();
        gho_access_switch_to_language($current_langcode);
      }
      else {
        $build = $plugin_block->build();
      }
      return $build;
    }
  }

  return [];
}

/**
 * Implements hook_preprocess_block().
 *
 * We have four logos for our four languages, so we need to know the language at
 * the time the block for the site logo is rendered.
 */
function common_design_subtheme_preprocess_block(&$variables) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['language'] = $language;
}
